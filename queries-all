-- 1. List all customers with distinct names
SELECT DISTINCT Name FROM Customer;

-- 2. Select all equipment available for rent sorted by rental price per day (descending)
SELECT Name, EQUIPMENT_PRICE, Condition FROM Equipment
WHERE STATUS = 'Available'
ORDER BY EQUIPMENT_PRICE DESC;

-- 3. Retrieve all overdue payments with status 'Paid'
SELECT * FROM Overdue
WHERE Status = 'Paid';

-- 4. Count the number of rentals per customer, showing customer name and rental count
SELECT c.Name, COUNT(r.Rental_ID) AS Rental_Count 
FROM Customer c
JOIN Rental r ON c.Customer_ID = r.Customer_ID
GROUP BY c.Name
ORDER BY Rental_Count DESC;

-- 5. Show the top 3 customers with the most equipment reservations
SELECT c.Name, COUNT(res.Reservation_ID) AS Total_Reservations 
FROM Customer c
JOIN Reservation res ON c.Customer_ID = res.Customer_ID
GROUP BY c.Name
ORDER BY Total_Reservations DESC
FETCH FIRST 3 ROWS ONLY;

-- 6. List all staff members and their positions, sorted alphabetically by name
SELECT Name, Position FROM Staff
ORDER BY Name;


-- 7. Select all equipment under maintenance and their respective maintenance cost
SELECT eq.Name, m.Maintenance_Cost 
FROM Equipment eq
JOIN Maintenance m ON eq.Equipment_ID = m.Equipment_ID
WHERE m.Status = 'Processing'
ORDER BY m.Maintenance_Cost DESC;

-- 8. List distinct equipment types in the database
SELECT DISTINCT Equipment_Type_Name FROM Equipment_Type;


-- 9. Calculate the total rental revenue for each staff member
SELECT s.Name, SUM(r.RENTAIL_PRICE) AS Total_Revenue 
FROM Staff s
JOIN Rental r ON s.Staff_ID = r.Staff_ID
GROUP BY s.Name
ORDER BY Total_Revenue DESC;



-- 10. Retrieve all payment records with payment methods that were declined
SELECT * FROM Payment
WHERE Status = 'Declined';

-- 11. Count the total number of overdue payments grouped by customer
SELECT c.Name AS Customer_Name, COUNT(o.Overdue_ID) AS Total_Overdue
FROM Rental_Customer rc
JOIN Overdue o ON rc.Rental_ID = o.Rental_ID
JOIN Customer c ON rc.Customer_ID = c.Customer_ID
GROUP BY c.Name;

-- 12. List all equipment purchased in 2023, sorted by purchase date
SELECT Name, Purchase_Date, Equipment_Price FROM Equipment
WHERE EXTRACT(YEAR FROM Purchase_Date) = 2023
ORDER BY Purchase_Date DESC;

-- 13. Show the average maintenance cost for each equipment type
SELECT et.Equipment_Type_Name, AVG(m.Maintenance_Cost) AS Avg_Maintenance_Cost
FROM Equipment_Type et
JOIN Equipment eq ON et.Equipment_Type_ID = eq.Equipment_Type_ID
JOIN Maintenance m ON eq.Equipment_ID = m.Equipment_ID
GROUP BY et.Equipment_Type_Name;

-- 14. List all rental history records for a specific customer by name
SELECT rh.Rental_History_ID, eq.Name, rh.Rental_Date, rh.Duration, rh.Rental_Return 
FROM Rental_History rh
JOIN Customer c ON rh.Customer_ID = c.Customer_ID
JOIN Equipment eq ON rh.Equipment_ID = eq.Equipment_ID
WHERE c.Name = 'John Doe';

-- 15. Show the equipment that has never been rented
SELECT eq.Name FROM Equipment eq
LEFT JOIN Rental r ON eq.Equipment_ID = r.Equipment_ID
WHERE r.Rental_ID IS NULL;



-- ---------------------------------------------
-- Views
-- ---------------------------------------------

-- 1. View to see rental history along with customer and equipment names
CREATE VIEW Rental_History_View AS
SELECT rh.Rental_History_ID, c.Name AS Customer_Name, eq.Name AS Equipment_Name, rh.Rental_Date, rh.Duration, rh.Rental_Return
FROM Rental_History rh
JOIN Customer c ON rh.Customer_ID = c.Customer_ID
JOIN Equipment eq ON rh.Equipment_ID = eq.Equipment_ID;

SELECT * FROM Rental_History_View;


-- 2. View to display overdue payments for specific customers
CREATE VIEW Overdue_Payments_View AS
SELECT o.Overdue_ID, c.Name AS Customer_Name, o.Amount, o.Overdue_Date, o.Status
FROM Overdue o
JOIN Rental_Customer rc ON o.Rental_ID = rc.Rental_ID
JOIN Customer c ON c.Customer_ID = rc.Customer_ID
WHERE o.Status = 'Paid';

SELECT * FROM Overdue_Payments_View;


-- 3. View for available equipment with type name
CREATE VIEW Available_Equipment_View AS
SELECT eq.Name, et.Equipment_Type_Name, eq.EQUIPMENT_PRICE
FROM Equipment eq
JOIN Equipment_Type et ON eq.Equipment_Type_ID = et.Equipment_Type_ID
WHERE eq.status = 'Available';

SELECT * FROM Available_Equipment_View;


-- 4. View showing payments along with customer and rental details
CREATE VIEW Payments_With_Details_View AS
SELECT p.Payment_ID, c.Name AS Customer_Name, r.Rental_ID, p.Payment_Date, p.Amount, p.Status
FROM Payment p
JOIN PAYMENT_RENTAL_CUSTOMER prc ON prc.payment_id = p.payment_id
JOIN Customer c ON prc.Customer_ID = c.Customer_ID
JOIN Rental r ON prc.Rental_ID = r.Rental_ID;

SELECT * FROM Payments_With_Details_View;

-- 5. View to list current maintenance activities along with equipment names
CREATE VIEW Maintenance_Activities_View AS
SELECT m.Maintenance_ID, eq.Name AS Equipment_Name, m.Maintenance_Start_Date, m.Expected_Completion_Date, m.Status
FROM Maintenance m
JOIN Equipment eq ON m.Equipment_ID = eq.Equipment_ID
WHERE m.Status = 'Processing';

SELECT * FROM Maintenance_Activities_View;

-- ---------------------------------------------
-- Join Queries
-- ---------------------------------------------

-- 1. Join query to display customer rental history
SELECT c.Name AS Customer_Name, r.Rental_ID, eq.Name AS Equipment_Name, r.Rental_Date, r.Estimated_Return_Date 
FROM Customer c
JOIN Rental r ON c.Customer_ID = r.Customer_ID
JOIN Equipment eq ON r.Equipment_ID = eq.Equipment_ID;

-- 2. Join query to find all payments with associated customer names and rental details
SELECT p.Payment_ID, c.Name AS Customer_Name, r.Rental_ID, p.Amount, p.Payment_Method, p.Status 
FROM Payment p
JOIN PAYMENT_RENTAL_CUSTOMER prc ON prc.payment_ID = p.payment_id
JOIN Customer c ON prc.Customer_ID = c.Customer_ID
JOIN Rental r ON prc.Rental_ID = r.Rental_ID;

-- 3. Join query to retrieve all overdue payments with rental and customer details
SELECT o.Overdue_ID, c.Name AS Customer_Name, o.Amount, r.Rental_ID, o.Status 
FROM Overdue o
JOIN rental_customer rc ON rc.rental_id = o.rental_id
JOIN Rental r ON rc.Rental_ID = r.Rental_ID
JOIN Customer c ON rc.Customer_ID = c.Customer_ID;

-- 4. Join query to list all equipment that is currently rented along with the customer renting it
SELECT 
    e.Name AS Equipment_Name, 
    c.Name AS Customer_Name, 
    r.Rental_Date, 
    r.Estimated_Return_Date
FROM Equipment e
JOIN Rental r ON e.Equipment_ID = r.Equipment_ID
JOIN Rental_Customer rc ON r.Rental_ID = rc.Rental_ID
JOIN Customer c ON rc.Customer_ID = c.Customer_ID
WHERE r.Status = 'Ongoing';

-- 5. Join query to list equipment along with the type and rental status
SELECT 
    e.Name AS Equipment_Name,
    et.Equipment_Type_Name AS Equipment_Type,
    r.Status AS Rental_Status
FROM Equipment e
LEFT JOIN Equipment_Type et ON e.Equipment_Type_ID = et.Equipment_Type_ID
LEFT JOIN Rental r ON e.Equipment_ID = r.Equipment_ID;


-- ---------------------------------------------
-- Union, Minus, exists Queries
-- ---------------------------------------------

-- Query to List Customers Who Have Not Rented Any Equipment
SELECT 
    c.Name AS Customer_Name, 
    ce.Customer_Email AS Email, 
    cp.Customer_Phone_Number AS Phone
FROM Customer c
LEFT JOIN Customer_Email ce ON c.Customer_ID = ce.Customer_ID
LEFT JOIN Customer_Phone cp ON c.Customer_ID = cp.Customer_ID
WHERE NOT EXISTS (
    SELECT 1 
    FROM Rental r
    WHERE r.Customer_ID = c.Customer_ID
);


-- Query to Count Rentals Grouped by Equipment Condition
SELECT Condition, COUNT(*) AS Total_Rentals
FROM Equipment E
JOIN Rental R ON E.Equipment_ID = R.Equipment_ID
GROUP BY Condition
HAVING COUNT(*) > 5;


-- Query to Retrieve Rentals That Have Overdue Charges Using UNION
SELECT r.Rental_ID, rc.Customer_ID, r.Status
FROM Rental r
JOIN Rental_Customer rc ON r.Rental_ID = rc.Rental_ID
WHERE r.Status = 'Overdue'
UNION
SELECT o.Rental_ID, rc.Customer_ID, 'Overdue Charge' AS Status
FROM Overdue o
JOIN Rental_Customer rc ON o.Rental_ID = rc.Rental_ID;


-- Query to Find Equipment That Has Never Been Reserved
SELECT E.Equipment_ID, E.Name
FROM Equipment E
MINUS
SELECT R.Equipment_ID, E.Name
FROM Equipment E
JOIN Reservation R ON E.Equipment_ID = R.Equipment_ID;

-- Query to List Customers with Overdue Rentals but No Payments
SELECT c.Name AS Customer_Name, ce.Customer_Email AS Email
FROM Customer c
JOIN Customer_Email ce ON c.Customer_ID = ce.Customer_ID
WHERE EXISTS (
    SELECT 1 
    FROM Overdue o
    JOIN Rental_Customer rc ON o.Rental_ID = rc.Rental_ID
    WHERE rc.Customer_ID = c.Customer_ID
)
AND NOT EXISTS (
    SELECT 1
    FROM Payment p
    JOIN Rental_Customer rc ON p.Rental_ID = rc.Rental_ID
    WHERE rc.Customer_ID = c.Customer_ID
);


-- Query to Calculate Total Maintenance Cost per Equipment
SELECT E.Name, SUM(M.Maintenance_Cost) AS Total_Cost
FROM Equipment E
JOIN Maintenance M ON E.Equipment_ID = M.Equipment_ID
GROUP BY E.Name
HAVING SUM(M.Maintenance_Cost) > 1000;


-- ---------------------------------------------
-- Advanced Queries
-- ---------------------------------------------


-- 1. Query to List Customers Who Have Not Rented Any Equipment

SELECT Name, Email
FROM Customer C
WHERE NOT EXISTS (
    SELECT 1
    FROM Rental R
    WHERE R.Customer_ID = C.Customer_ID
);


-- 2. Query to Count Rentals Grouped by Equipment Condition

SELECT Condition, COUNT(*) AS Total_Rentals
FROM Equipment E
JOIN Rental R ON E.Equipment_ID = R.Equipment_ID
GROUP BY Condition
HAVING COUNT(*) > 5;

-- 3. Query to Retrieve Rentals That Have Overdue Charges Using UNION

SELECT R.Rental_ID, R.Customer_ID, R.Status
FROM Rental R
WHERE R.Status = 'Overdue'
UNION
SELECT O.Rental_ID, O.Customer_ID, 'Overdue Charge' AS Status
FROM Overdue O;

-- 4. Query to Find Equipment That Has Never Been Reserved

SELECT E.Equipment_ID, E.Name
FROM Equipment E
MINUS
SELECT R.Equipment_ID, E.Name
FROM Equipment E
JOIN Reservation R ON E.Equipment_ID = R.Equipment_ID;


-- 5. Query to List Customers with Overdue Rentals but No Payments

SELECT C.Name, C.Email
FROM Customer C
WHERE EXISTS (
    SELECT 1
    FROM Overdue O
    WHERE O.Customer_ID = C.Customer_ID
)
AND NOT EXISTS (
    SELECT 1
    FROM Payment P
    WHERE P.Customer_ID = C.Customer_ID
);

-- 6. Query to Calculate Total Maintenance Cost per Equipment

SELECT E.Name, SUM(M.Maintenance_Cost) AS Total_Cost
FROM Equipment E
JOIN Maintenance M ON E.Equipment_ID = M.Equipment_ID
GROUP BY E.Name
HAVING SUM(M.Maintenance_Cost) > 1000;
